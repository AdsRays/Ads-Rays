import express from "express";
import * as fs from "fs";
import { PDFDocument, rgb } from "pdf-lib";
import fontkit from "@pdf-lib/fontkit";
import { fileURLToPath } from "url";

const app = express();
app.use(express.json());

// Путь к TTF из src (ESM, без __dirname): подняться на 3 уровня → ../../../data/fonts/...
const FONT_URL = new URL("../../../data/fonts/NotoSans-Regular.ttf", import.meta.url);
const FONT_PATH = fileURLToPath(FONT_URL);

function readFontBytes(): Uint8Array {
  if (!fs.existsSync(FONT_PATH)) {
    throw new Error("Font file not found: " + FONT_PATH);
  }
  return fs.readFileSync(FONT_PATH);
}

// Healthcheck
app.get("/healthz", (_req, res) => res.status(200).send("OK"));

// Генерация PDF с кириллицей
app.post("/api/report/pdf", async (_req, res) => {
  try {
    const pdf = await PDFDocument.create();
    pdf.registerFontkit(fontkit);

    const fontBytes = readFontBytes();
    const font = await pdf.embedFont(fontBytes);

    pdf.setTitle("Проверка кириллицы – Привет, мир!");
    pdf.setAuthor("AdsRays"); pdf.setCreator("AdsRays"); pdf.setProducer("AdsRays pdf-lib");

    const page = pdf.addPage([595, 842]); // A4
    const { height } = page.getSize();

    page.drawText("Hello World (English OK)", { x: 50, y: height - 100, size: 14, font, color: rgb(0,0,0) });
    page.drawText("Проверка кириллицы: Привет, мир!", { x: 50, y: height - 120, size: 14, font, color: rgb(0,0,0) });

    const bytes = await pdf.save({ useObjectStreams: false });
    res.setHeader("Content-Type", "application/pdf");
    res.send(Buffer.from(bytes));
  } catch (e: any) {
    console.error("PDF generation error:", e?.message || e, e?.stack);
    res.status(500).send("PDF generation error");
  }
});

// Старт сервера
const PORT = process.env.PORT ? Number(process.env.PORT) : 4000;
app.listen(PORT, () => console.log(`API running on http://localhost:${PORT}`));
