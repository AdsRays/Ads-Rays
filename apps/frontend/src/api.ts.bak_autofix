export const API_BASE: string = (import.meta as any).env?.VITE_API_BASE || "http://localhost:4000";

async function asJson<T>(res: Response): Promise<T> {
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return res.json().catch(() => ({} as T));
}

/** READ endpoints (на случай если App.tsx их импортирует) */
export async function getOverview(): Promise<any> {
  const res = await fetch(`${API_BASE}/api/overview`);
  return asJson(res);
}
export async function getRecommendations(): Promise<any> {
  const res = await fetch(`${API_BASE}/api/recommendations`);
  return asJson(res);
}

/** WRITE endpoints */
export async function postForecast(payload: any): Promise<any> {
  const res = await fetch(`${API_BASE}/api/forecast`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload ?? {})
  });
  return asJson(res);
}

export async function uploadCsv(file: File): Promise<any> {
  const fd = new FormData();
  fd.append("file", file);
  const res = await fetch(`${API_BASE}/api/upload/csv`, { method: "POST", body: fd });
  return asJson(res);
}

export async function uploadScreenshot(file: File): Promise<any> {
  const fd = new FormData();
  fd.append("file", file);
  const res = await fetch(`${API_BASE}/api/upload/screenshot`, { method: "POST", body: fd });
  return asJson(res);
}

/** PDF */
export const generatePdf = async (): Promise<Blob> => {
  const res = await fetch(`${API_BASE}/api/report/pdf`, { method: "POST" });
  if (!res.ok) throw new Error(`generatePdf ${res.status}`);
  return res.blob();
};
export async function getCreatives(): Promise<any> {
  const res = await fetch(`${API_BASE}/api/creatives`);
  if (!res.ok) throw new Error(`getCreatives ${res.status}`);
  return res.json().catch(() => ([]));
}
